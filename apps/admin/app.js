// app.js
import {
  sha256,
  getStaffByUsername,
  getStaffProfile,
  listActiveRewards,
  addPointsToMember,
  redeemReward
} from "./api.js";

/* ============ LIFF login helper (‡πÑ‡∏°‡πà init ‡∏ã‡πâ‡∏≥) ============ */
async function ensureLiffLogin() {
  if (!window.liff) return false;
  if (!liff.isLoggedIn()) {
    liff.login({ redirectUri: window.location.href });
    return false; // ‡∏à‡∏∞ redirect ‡πÑ‡∏õ login ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
  }
  return !!liff.getAccessToken();
}

/* ============ Bootstrapping ============ */
document.addEventListener("DOMContentLoaded", async () => {
  try {
    await liff.init({ liffId: "2007661818-nmBNkzZ5" });
  } catch (e) {
    console.warn("LIFF init error:", e);
  }

  // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏°‡∏µ access_token (‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡∏¥‡∏î‡∏à‡∏≤‡∏Å LINE)
  const ok = await ensureLiffLogin();
  if (!ok && window.liff) return;

  // bind ‡∏õ‡∏∏‡πà‡∏° Login
  const btn = document.getElementById("loginBtn");
  if (btn) btn.addEventListener("click", login);

  restoreLogin();
});

/* ============ Utilities ============ */
function withButton(btn, busyText, task) {
  const textEl = btn.querySelector("[data-text]") || btn;
  const spinEl = btn.querySelector("[data-spin]");
  const oldText = textEl.textContent;

  btn.disabled = true;
  if (busyText) textEl.textContent = busyText;
  if (spinEl) spinEl.classList.remove("hidden");

  return Promise.resolve()
    .then(task)
    .finally(() => {
      btn.disabled = false;
      textEl.textContent = oldText;
      if (spinEl) spinEl.classList.add("hidden");
    });
}

function setStaffUI({ staffName, branchId }) {
  const hello = document.getElementById("helloSection");
  const login = document.getElementById("loginScreen");
  const bar = document.getElementById("staffBar");
  document.getElementById("staffNameLabel").textContent = staffName || "-";
  document.getElementById("branchIdLabel").textContent = branchId ?? "-";
  login.classList.add("hidden");
  hello.classList.remove("hidden");
  bar.classList.remove("hidden");
}

function restoreLogin() {
  const staffId = localStorage.getItem("staffId");
  const staffName = localStorage.getItem("staffName");
  const branchId = localStorage.getItem("branchId");
  if (staffId && staffName) setStaffUI({ staffName, branchId });
}

function logoutStaff() {
  closeQrModal(true);
  localStorage.removeItem("staffId");
  localStorage.removeItem("staffName");
  localStorage.removeItem("branchId");
  document.getElementById("helloSection").classList.add("hidden");
  document.getElementById("staffBar").classList.add("hidden");
  document.getElementById("loginScreen").classList.remove("hidden");
}

/* ============ Section toggle ============ */
let currentVisibleId = null;
function showSection(id) {
  const section = document.getElementById(id);
  if (!section) return;

  // ‡∏Å‡∏±‡∏ô null ‡∏Å‡∏£‡∏ì‡∏µ element ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ/‡∏ñ‡∏π‡∏Å‡∏•‡∏ö
  const addResEl = document.getElementById("addPointResult");
  const redeemResEl = document.getElementById("redeemResult");
  if (id !== "addPoints" && addResEl) addResEl.textContent = "";
  if (id !== "redeem" && redeemResEl) redeemResEl.textContent = "";

  if (currentVisibleId === id) {
    section.style.display = "none";
    currentVisibleId = null;
  } else {
    document.querySelectorAll(".section").forEach((sec) => {
      sec.style.display = (sec.id === id) ? "block" : "none";
    });
    currentVisibleId = id;

    if (id === "redeem") loadRewardsCatalog();

    setTimeout(() => section.scrollIntoView({ behavior: "smooth", block: "start" }), 100);
  }
}

/* ============ Auth (UI) ============ */
async function login() {
  const user = document.getElementById("username").value.trim();
  const pass = document.getElementById("password").value.trim();
  const error = document.getElementById("errorMsg");
  const btn = document.getElementById("loginBtn");
  error.classList.add("hidden");

  if (!user || !pass) {
    error.textContent = "‚ùå ‡πÇ‡∏õ‡∏£‡∏î‡∏Å‡∏£‡∏≠‡∏Å Username/Password";
    error.classList.remove("hidden");
    return;
  }

  await withButton(btn, "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö...", async () => {
    try {
      const staff = await getStaffByUsername(user);
      if (!staff) throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ");
      if ((staff.Status || "").toLowerCase() !== "active") {
        throw new Error("‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô");
      }
      const hash = await sha256(pass);
      if (hash !== staff.PasswordHash) {
        throw new Error("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
      }

      localStorage.setItem("staffId", staff.StaffID || staff.id);
      localStorage.setItem("staffName", staff.Name || user);
      localStorage.setItem("branchId", staff.BranchID || "");

      setStaffUI({
        staffName: staff.Name || user,
        branchId: staff.BranchID || "-"
      });
    } catch (e) {
      console.error(e);
      error.textContent = `‚ùå ${e.message || "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"}`;
      error.classList.remove("hidden");
    }
  });
}

/* ============ Add points (UI) ============ */
function clearAddPointsForm() {
  document.getElementById("billNumber").value = "";
  document.getElementById("addPointPhone").value = "";
  document.getElementById("amount").value = "";
}

async function addPoints() {
  const staffId = localStorage.getItem("staffId");
  if (!staffId) { alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô"); return; }

  const bill = document.getElementById("billNumber").value.trim();
  const phone = document.getElementById("addPointPhone").value.trim();
  const amount = document.getElementById("amount").value.trim();
  const resultDiv = document.getElementById("addPointResult");
  const btn = document.getElementById("addPointBtn");

  resultDiv.textContent = "";

  if (!/^[a-zA-Z0-9]{5,}$/.test(bill)) { resultDiv.innerHTML = '<p class="text-red-500">‚ùå ‡πÄ‡∏•‡∏Ç‡∏ö‡∏¥‡∏•‡∏ï‡πâ‡∏≠‡∏á‡∏¢‡∏≤‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 5 ‡∏ï‡∏±‡∏ß (A-Z, a-z, 0-9)</p>'; return; }
  if (!/^0\d{9}$/.test(phone)) { resultDiv.innerHTML = '<p class="text-red-500">‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ 10 ‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á</p>'; return; }
  if (isNaN(amount) || Number(amount) <= 0) { resultDiv.innerHTML = '<p class="text-red-500">‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á</p>'; return; }
  if (Math.floor(Number(amount) / 100) === 0) { resultDiv.innerHTML = '<p class="text-red-500">‚ùå ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 100 ‡∏ö‡∏≤‡∏ó‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πâ‡∏°</p>'; return; }

  await withButton(btn, "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ï‡πâ‡∏°...", async () => {
    try {
      const { pointsAdded, staffProfile } = await addPointsToMember({ staffId, bill, phone, amount });
      resultDiv.innerHTML = `
        <p class="text-green-600">‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ï‡πâ‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à +${pointsAdded} ‡πÅ‡∏ï‡πâ‡∏°</p>
        <p class="text-gray-600 text-sm">‡∏ú‡∏π‡πâ‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: ${staffProfile?.staffName || "-"} (‡∏™‡∏≤‡∏Ç‡∏≤: ${staffProfile?.branchId || "-"})</p>
      `;
      clearAddPointsForm();
    } catch (err) {
      if (err.code === "DUPLICATE_BILL") {
        resultDiv.innerHTML = `<p class="text-red-500">‚ö†Ô∏è ‡πÄ‡∏•‡∏Ç‡∏ö‡∏¥‡∏•‡∏ã‡πâ‡∏≥: ${bill}</p>`;
        alert(err.message);
        return;
      }
      console.error("addPoints error:", err);
      alert(err?.message || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î");
    }
  });
}

/* ============ Redeem (UI) ============ */
function clearRedeemForm() {
  document.getElementById("redeemPhone").value = "";
  document.getElementById("rewardSelect").value = "";
  document.getElementById("pointsHint").textContent = "";
}

async function redeemPoints() {
  const staffId = localStorage.getItem("staffId");
  const staffNameFromLS = localStorage.getItem("staffName") || "";
  const branchIdFromLS = localStorage.getItem("branchId") || "";
  if (!staffId) { alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô"); return; }

  const phone = document.getElementById("redeemPhone").value.trim();
  const sel = document.getElementById("rewardSelect");
  const opt = sel.selectedOptions[0];
  const resultDiv = document.getElementById("redeemResult");
  const redeemBtn = document.getElementById("redeemBtn");

  resultDiv.textContent = "";

  if (!/^0\d{9}$/.test(phone) || !opt?.value) { resultDiv.innerHTML = '<p class="text-red-500">‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•</p>'; return; }
  if (opt.disabled) { resultDiv.innerHTML = '<p class="text-red-500">‚ùå ‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ô‡∏µ‡πâ‡∏´‡∏°‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß</p>'; return; }

  const rewardId = opt.value;
  const rewardNameText = opt.textContent.split("(")[0].trim();
  const needPoints = Number(opt.dataset.points || 0);

  await withButton(redeemBtn, "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏•‡∏Å...", async () => {
    try {
      const res = await redeemReward({
        staffId,
        staffName: staffNameFromLS,
        branchId: branchIdFromLS,
        phone,
        rewardId
      });

      resultDiv.innerHTML = `<p class="text-green-600">üéÅ ‡πÅ‡∏•‡∏Å ‚Äú${res.rewardName || rewardNameText}‚Äù ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏´‡∏±‡∏Å‡πÅ‡∏ï‡πâ‡∏° ${res.pointsUsed ?? needPoints} ‡πÅ‡∏ï‡πâ‡∏°</p>`;
      clearRedeemForm();
      await loadRewardsCatalog(); // refresh stock
    } catch (e) {
      console.error("redeemPoints error:", e);
      alert("‚ùå ‡πÅ‡∏•‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " + (e.message || "Unknown error"));
    }
  });

  redeemBtn.disabled = !(sel.selectedOptions[0] && sel.selectedOptions[0].value);
}

/* ============ Catalog (UI) ============ */
async function loadRewardsCatalog() {
  const loading = document.getElementById("rewardLoading");
  const err = document.getElementById("rewardError");
  const sel = document.getElementById("rewardSelect");
  const redeemBtn = document.getElementById("redeemBtn");
  const hint = document.getElementById("pointsHint");

  loading.textContent = "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‚Ä¶";
  err.classList.add("hidden");
  redeemBtn.disabled = true;
  hint.textContent = "";

  try {
    const items = await listActiveRewards();

    sel.innerHTML = '<option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏• --</option>';
    if (!items.length) {
      err.textContent = "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÉ‡∏´‡πâ‡πÅ‡∏•‡∏Å‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ";
      err.classList.remove("hidden");
      redeemBtn.disabled = true;
      return;
    }

    items.forEach(d => {
      const opt = document.createElement("option");
      const stock = Number(d.stock ?? 0);
      opt.value = d.reward_id;
      opt.textContent = `${d.reward_name} (${d.points} ‡πÅ‡∏ï‡πâ‡∏°)${stock <= 0 ? " ‚Äî ‡∏´‡∏°‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å" : ""}`;
      if (stock <= 0) opt.disabled = true;
      opt.dataset.points = d.points;
      sel.appendChild(opt);
    });

    sel.onchange = () => {
      const op = sel.selectedOptions[0];
      const p = op?.dataset.points || "";
      hint.textContent = p ? `‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ ${p} ‡πÅ‡∏ï‡πâ‡∏°` : "";
      redeemBtn.disabled = !(op && op.value) || (op && op.disabled);
      document.getElementById("redeemResult").textContent = "";
    };
  } catch (e) {
    console.error("loadRewardsCatalog error:", e);
    err.textContent = "‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà";
    err.classList.remove("hidden");
  } finally {
    loading.textContent = "";
  }
}

/* ============ QR Scan helpers ============ */
function inSecureContext() {
  return window.isSecureContext === true;
}

function canUseLiffScanner() {
  // ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏Å‡πá‡∏ï‡πà‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô LINE client ‡∏à‡∏£‡∏¥‡∏á ‡πÜ ‡πÅ‡∏•‡∏∞‡∏°‡∏µ API scanCodeV2
  return !!(window.liff && typeof liff.isInClient === "function" && liff.isInClient() && typeof liff.scanCodeV2 === "function");
}

async function requireCameraPermissionOrExplain() {
  if (!navigator.mediaDevices?.getUserMedia) return { ok: false, reason: "NO_API" };
  if (!inSecureContext()) return { ok: false, reason: "NOT_SECURE" };

  try {
    // ‡πÉ‡∏ä‡πâ permissions API ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤
    if (navigator.permissions?.query) {
      const st = await navigator.permissions.query({ name: "camera" });
      if (st.state === "denied") return { ok: false, reason: "DENIED" };
    }
    // ‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏ö‡∏ö‡∏™‡∏±‡πâ‡∏ô ‡πÜ (‡∏à‡∏∞‡πÇ‡∏ä‡∏ß‡πå prompt ‡∏£‡∏≠‡∏ö‡πÅ‡∏£‡∏Å)
    const s = await navigator.mediaDevices.getUserMedia({ video: true });
    s.getTracks().forEach(t => t.stop());
    return { ok: true };
  } catch (err) {
    const msg = (err && (err.name || err.message)) || "";
    if (/NotAllowedError|Permission/i.test(msg)) return { ok: false, reason: "DENIED" };
    return { ok: false, reason: "OTHER", err };
  }
}

let qrScanner = null;
let qrStarted = false;

async function startScannerForAddPoint() {
  if (canUseLiffScanner()) {
    const ok = await ensureLiffLogin();
    if (!ok) return;
    try {
      const res = await liff.scanCodeV2();
      document.getElementById("addPointPhone").value = (res?.value || "").trim();
      alert("‚úÖ ‡∏™‡πÅ‡∏Å‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ï‡πâ‡∏°");
      return;
    } catch (err) {
      alert("‚ùå ‡∏™‡πÅ‡∏Å‡∏ô‡∏î‡πâ‡∏ß‡∏¢ LIFF ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " + (err?.message || err));
      // ‡∏ñ‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡∏Ñ‡πà‡∏≠‡∏¢ fallback ‡πÑ‡∏õ HTML5
    }
  }
  openQrModal("add");
}

async function startScannerForRedeem() {
  if (canUseLiffScanner()) {
    const ok = await ensureLiffLogin();
    if (!ok) return;
    try {
      const res = await liff.scanCodeV2();
      document.getElementById("redeemPhone").value = (res?.value || "").trim();
      alert("‚úÖ ‡∏™‡πÅ‡∏Å‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î‡πÅ‡∏•‡∏Å");
      return;
    } catch (err) {
      alert("‚ùå ‡∏™‡πÅ‡∏Å‡∏ô‡∏î‡πâ‡∏ß‡∏¢ LIFF ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " + (err?.message || err));
    }
  }
  openQrModal("redeem");
}

async function openQrModal(kind) {
  const modal = document.getElementById("qrModal");
  const container = document.getElementById("qrReader");
  if (!modal || !container) return;

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡πà‡∏≠‡∏ô ‡∏ñ‡πâ‡∏≤‡πÇ‡∏î‡∏ô‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏à‡∏∞‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏õ‡∏¥‡∏î‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
  const perm = await requireCameraPermissionOrExplain();
  if (!perm.ok) {
    let how = "‚Ä¢ ‡πÄ‡∏õ‡∏¥‡∏î‡∏ú‡πà‡∏≤‡∏ô Chrome: ‡πÅ‡∏ï‡∏∞‡∏£‡∏π‡∏õ‡∏Å‡∏∏‡∏ç‡πÅ‡∏à > Site settings > Camera > Allow\n" +
      "‚Ä¢ ‡πÄ‡∏õ‡∏¥‡∏î‡∏ú‡πà‡∏≤‡∏ô LINE: Settings > Apps > LINE > Permissions > ‡πÄ‡∏õ‡∏¥‡∏î Camera\n‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ";
    if (perm.reason === "NOT_SECURE") {
      how = "‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏ô‡∏ö‡∏ô HTTPS ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡∏ã‡∏∂‡πà‡∏á Vercel ‡πÄ‡∏õ‡πá‡∏ô HTTPS ‡πÅ‡∏•‡πâ‡∏ß) ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ó‡∏µ‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ https://";
    }
    alert("‚ùå ‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏Å‡∏•‡πâ‡∏≠‡∏á\n\n" + how);
    return;
  }

  modal.classList.remove("hidden");
  container.innerHTML = "";

  // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏ö‡∏ö cameraId (‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£‡∏Å‡∏ß‡πà‡∏≤ Android)
  try {
    const cams = await Html5Qrcode.getCameras();
    const backCam = cams.find(c => /back|environment|rear/i.test(c.label)) || cams[0];
    if (!backCam) throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå");

    qrScanner = new Html5Qrcode("qrReader");
    qrStarted = false;

    await qrScanner.start(
      backCam.id,
      { fps: 10, qrbox: { width: 280, height: 280 } },
      (decodedText) => {
        const value = (decodedText || "").trim();
        if (kind === "add") document.getElementById("addPointPhone").value = value;
        if (kind === "redeem") document.getElementById("redeemPhone").value = value;
        closeQrModal();
        alert("‚úÖ ‡∏™‡πÅ‡∏Å‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
      }
    );
    qrStarted = true;
  } catch (err) {
    const msg = err?.message || err;
    if (/NotAllowedError|Permission/i.test(msg)) {
      alert("‚ùå ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏•‡πâ‡∏≠‡∏á\n\n‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ:\n- Chrome: ‡∏£‡∏π‡∏õ‡∏Å‡∏∏‡∏ç‡πÅ‡∏à > Site settings > Camera > Allow\n- LINE: Settings > Apps > LINE > Permissions > Camera = On");
    } else {
      alert("‚ùå ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " + msg);
    }
    try { await qrScanner?.clear(); } catch { }
    document.getElementById("qrModal")?.classList.add("hidden");
    qrScanner = null;
    qrStarted = false;
  }
}

async function closeQrModal(forceOnlyHide = false) {
  const modal = document.getElementById("qrModal");
  if (modal) modal.classList.add("hidden");
  if (forceOnlyHide) return;

  if (!qrScanner) return;
  try { if (qrStarted) await qrScanner.stop(); } catch { }
  try { await qrScanner.clear(); } catch { }
  qrScanner = null;
  qrStarted = false;
}

/* ============ Expose to HTML ============ */
window.login = login;
window.logoutStaff = logoutStaff;
window.addPoints = addPoints;
window.redeemPoints = redeemPoints;
window.showSection = showSection;
window.startScannerForAddPoint = startScannerForAddPoint;
window.startScannerForRedeem = startScannerForRedeem;
window.loadRewardsCatalog = loadRewardsCatalog;
window.closeQrModal = closeQrModal;
